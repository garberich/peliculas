{"ast":null,"code":"import _slicedToArray from \"/home/richard/Documentos/Projectos/Personal/peliculas/react-peliculas/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/richard/Documentos/Projectos/Personal/peliculas/react-peliculas/src/peliculas/FormularioPeliculas.tsx\",\n    _s = $RefreshSig$();\n\nimport { Form, Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport FormGroupText from \"../utils/FormGroupText\";\nimport FormGroupCheckbox from \"../utils/FormGroupCheckbox\";\nimport FormGroupFecha from \"../utils/FormGroupFecha\";\nimport FormGroupImagen from \"../utils/FormGroupImagen\";\nimport Button from \"../utils/Button\";\nimport { Link } from \"react-router-dom\";\nimport SelectorMultiple from \"../utils/SelectorMultiple\";\nimport { useState } from \"react\";\nimport TypeAheadActores from \"../actores/TypeAheadActores\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FormularioPeliculas(props) {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState(mapear(props.generosSeleccionados)),\n      _useState2 = _slicedToArray(_useState, 2),\n      generosSeleccionados = _useState2[0],\n      setGenerosSeleccionados = _useState2[1];\n\n  var _useState3 = useState(mapear(props.generosNoSeleccionados)),\n      _useState4 = _slicedToArray(_useState3, 2),\n      generosNoSeleccionados = _useState4[0],\n      setGenerosNoSeleccionados = _useState4[1];\n\n  var _useState5 = useState(mapear(props.cinesSeleccionados)),\n      _useState6 = _slicedToArray(_useState5, 2),\n      cinesSeleccionados = _useState6[0],\n      setCinesSeleccionados = _useState6[1];\n\n  var _useState7 = useState(mapear(props.cinesNoSeleccionados)),\n      _useState8 = _slicedToArray(_useState7, 2),\n      cinesNoSeleccionados = _useState8[0],\n      setCinesNoSeleccionados = _useState8[1];\n\n  function mapear(arreglo) {\n    return arreglo.map(function (valor) {\n      return {\n        llave: valor.id,\n        valor: valor.nombre\n      };\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: props.modelo,\n    onSubmit: function onSubmit(valores, acciones) {\n      valores.generosIds = generosSeleccionados.map(function (valor) {\n        return valor.llave;\n      });\n      valores.cinesIds = cinesSeleccionados.map(function (valor) {\n        return valor.llave;\n      });\n      props.onSubmit(valores, acciones);\n    },\n    validationSchema: Yup.object({\n      titulo: Yup.string().required(\"Este campo es requerido\").primeraLetraMayuscula()\n    }),\n    children: function children(formikProps) {\n      return /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(FormGroupText, {\n          label: \"T\\xEDtulo\",\n          campo: \"titulo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(FormGroupCheckbox, {\n          label: \"En cines\",\n          campo: \"enCines\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(FormGroupText, {\n          label: \"Trailer\",\n          campo: \"trailer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(FormGroupFecha, {\n          label: \"Fecha Lanzamiento\",\n          campo: \"fechaLanzamiento\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(FormGroupImagen, {\n          label: \"Poster\",\n          campo: \"poster\",\n          imagenURL: props.modelo.posterURL\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"G\\xE9neros:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(SelectorMultiple, {\n            seleccionados: generosSeleccionados,\n            noSeleccionados: generosNoSeleccionados,\n            onChange: function onChange(seleccionados, noSeleccionados) {\n              setGenerosSeleccionados(seleccionados);\n              setGenerosNoSeleccionados(noSeleccionados);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Cines:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(SelectorMultiple, {\n            seleccionados: cinesSeleccionados,\n            noSeleccionados: cinesNoSeleccionados,\n            onChange: function onChange(seleccionados, noSeleccionados) {\n              setCinesSeleccionados(seleccionados);\n              setCinesNoSeleccionados(noSeleccionados);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: /*#__PURE__*/_jsxDEV(TypeAheadActores, {\n            actores: []\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(Button, {\n          disabled: formikProps.isSubmitting,\n          type: \"submit\",\n          children: \"Enviar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(Link, {\n          className: \"btn btn-secondary\",\n          to: \"/\",\n          children: \"Cancelar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, _this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FormularioPeliculas, \"BNcoyfb+AbvavkngBYHxSZ+RFXA=\");\n\n_c = FormularioPeliculas;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormularioPeliculas\");","map":{"version":3,"sources":["/home/richard/Documentos/Projectos/Personal/peliculas/react-peliculas/src/peliculas/FormularioPeliculas.tsx"],"names":["Form","Formik","Yup","FormGroupText","FormGroupCheckbox","FormGroupFecha","FormGroupImagen","Button","Link","SelectorMultiple","useState","TypeAheadActores","FormularioPeliculas","props","mapear","generosSeleccionados","setGenerosSeleccionados","generosNoSeleccionados","setGenerosNoSeleccionados","cinesSeleccionados","setCinesSeleccionados","cinesNoSeleccionados","setCinesNoSeleccionados","arreglo","map","valor","llave","id","nombre","modelo","valores","acciones","generosIds","cinesIds","onSubmit","object","titulo","string","required","primeraLetraMayuscula","formikProps","posterURL","seleccionados","noSeleccionados","isSubmitting"],"mappings":"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","sourcesContent":["import { Form, Formik, FormikHelpers } from \"formik\";\nimport { peliculaCreacionDTO } from \"./peliculas.model\";\nimport * as Yup from \"yup\";\nimport FormGroupText from \"../utils/FormGroupText\";\nimport FormGroupCheckbox from \"../utils/FormGroupCheckbox\";\nimport FormGroupFecha from \"../utils/FormGroupFecha\";\nimport FormGroupImagen from \"../utils/FormGroupImagen\";\nimport Button from \"../utils/Button\";\nimport { Link } from \"react-router-dom\";\nimport SelectorMultiple, { selectorMultipleModel } from \"../utils/SelectorMultiple\";\nimport { generoDTO } from \"../generos/generos.model\";\nimport { useState } from \"react\";\nimport { cineDTO } from \"../cines/cines.model\";\nimport TypeAheadActores from \"../actores/TypeAheadActores\";\n\nexport default function FormularioPeliculas(props: formularioPeliculasProps) {\n    const [generosSeleccionados, setGenerosSeleccionados] = useState(mapear(props.generosSeleccionados));\n    const [generosNoSeleccionados, setGenerosNoSeleccionados] = useState(mapear(props.generosNoSeleccionados));\n\n    const [cinesSeleccionados, setCinesSeleccionados] = useState(mapear(props.cinesSeleccionados));\n    const [cinesNoSeleccionados, setCinesNoSeleccionados] = useState(mapear(props.cinesNoSeleccionados));\n\n    function mapear(arreglo: {id:number, nombre: string}[]): selectorMultipleModel[]{\n        return arreglo.map(valor => ({ llave: valor.id, valor: valor.nombre }))\n    }\n\n    \n  return (\n    <Formik\n      initialValues={props.modelo}\n      onSubmit={(valores, acciones) => {\n          valores.generosIds = generosSeleccionados.map(valor => valor.llave);\n          valores.cinesIds = cinesSeleccionados.map(valor => valor.llave);\n          props.onSubmit(valores,acciones);\n    }}\n      validationSchema={Yup.object({\n        titulo: Yup.string()\n          .required(\"Este campo es requerido\")\n          .primeraLetraMayuscula(),\n      })}\n    >\n      {(formikProps) => (\n        <Form>\n          <FormGroupText label=\"Título\" campo=\"titulo\" />\n          <FormGroupCheckbox label=\"En cines\" campo=\"enCines\" />\n          <FormGroupText label=\"Trailer\" campo=\"trailer\" />\n          <FormGroupFecha label=\"Fecha Lanzamiento\" campo=\"fechaLanzamiento\" />\n          <FormGroupImagen\n            label=\"Poster\"\n            campo=\"poster\"\n            imagenURL={props.modelo.posterURL}\n          />\n\n          <div className=\"form-group\">\n              <label>Géneros:</label>\n              <SelectorMultiple \n              seleccionados={generosSeleccionados}\n              noSeleccionados={generosNoSeleccionados}\n              onChange={(seleccionados, noSeleccionados) => {\n                setGenerosSeleccionados(seleccionados)\n                  setGenerosNoSeleccionados(noSeleccionados)\n              }}\n              />\n          </div>\n\n          <div className=\"form-group\">\n              <label>Cines:</label>\n              <SelectorMultiple \n              seleccionados={cinesSeleccionados}\n              noSeleccionados={cinesNoSeleccionados}\n              onChange={(seleccionados, noSeleccionados) => {\n                setCinesSeleccionados(seleccionados)\n                  setCinesNoSeleccionados(noSeleccionados)\n              }}\n              />\n          </div>\n\n          <div className=\"form-group\">\n            <TypeAheadActores \n            actores={[]}\n            />\n\n          </div>\n\n          <Button disabled={formikProps.isSubmitting} type=\"submit\">\n            Enviar\n          </Button>\n          <Link className=\"btn btn-secondary\" to=\"/\">\n            Cancelar\n          </Link>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\ninterface formularioPeliculasProps {\n  modelo: peliculaCreacionDTO;\n  onSubmit(\n    valores: peliculaCreacionDTO,\n    acciones: FormikHelpers<peliculaCreacionDTO>\n  ): void;\n  generosSeleccionados:generoDTO[];\n  generosNoSeleccionados:generoDTO[];\n  cinesSeleccionados: cineDTO[];\n  cinesNoSeleccionados: cineDTO[];\n}\n"]},"metadata":{},"sourceType":"module"}