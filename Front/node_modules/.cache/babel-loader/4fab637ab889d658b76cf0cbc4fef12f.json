{"ast":null,"code":"var _jsxFileName = \"/home/richard/Documentos/Projectos/Personal/peliculas/react-peliculas/src/utils/FormGroupFecha.tsx\",\n    _s = $RefreshSig$();\n\nimport { useFormikContext } from \"formik\";\nimport MostrarErrorCampo from \"./MostrarErrorCampo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FormGroupFecha(props) {\n  _s();\n\n  var _values$props$campo, _errors$props$campo;\n\n  // Si queremos obtener por ejemplo la fecha de nacimiento del actor que estamos editando debemos usar un contexto que nos\n  // provee formik para extraer información. Con un contexto tenemos un proveedor que nos provee valores\n  // Desde cualquier componente interno de formik podemos acceder a los valores que nos da el contexto\n  var _useFormikContext = useFormikContext(),\n      values = _useFormikContext.values,\n      validateForm = _useFormikContext.validateForm,\n      touched = _useFormikContext.touched,\n      errors = _useFormikContext.errors;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-group\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: props.campo,\n      children: props.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"date\",\n      className: \"form-control\",\n      id: props.campo,\n      name: props.campo,\n      defaultValue: (_values$props$campo = values[props.campo]) === null || _values$props$campo === void 0 ? void 0 : _values$props$campo.toLocaleDateString('en-CA'),\n      onChange: function onChange(e) {\n        var fecha = new Date(e.currentTarget.value + 'T00:00:00'); // con esto actualizamos el formulario\n\n        values[props.campo] = fecha;\n        validateForm();\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), touched[props.campo] && errors[props.campo] ? /*#__PURE__*/_jsxDEV(MostrarErrorCampo, {\n      mensaje: (_errors$props$campo = errors[props.campo]) === null || _errors$props$campo === void 0 ? void 0 : _errors$props$campo.toString()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FormGroupFecha, \"qY0THuA31tj6kZcHzz6bWpBYuJI=\", false, function () {\n  return [useFormikContext];\n});\n\n_c = FormGroupFecha;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormGroupFecha\");","map":{"version":3,"sources":["/home/richard/Documentos/Projectos/Personal/peliculas/react-peliculas/src/utils/FormGroupFecha.tsx"],"names":["useFormikContext","MostrarErrorCampo","FormGroupFecha","props","values","validateForm","touched","errors","campo","label","toLocaleDateString","e","fecha","Date","currentTarget","value","toString"],"mappings":";;;AAAA,SAASA,gBAAT,QAAiC,QAAjC;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;;AAEA,eAAe,SAASC,cAAT,CAAwBC,KAAxB,EAAqD;AAAA;;AAAA;;AAClE;AACA;AACA;AAEA,0BAAkDH,gBAAgB,EAAlE;AAAA,MAAQI,MAAR,qBAAQA,MAAR;AAAA,MAAgBC,YAAhB,qBAAgBA,YAAhB;AAAA,MAA8BC,OAA9B,qBAA8BA,OAA9B;AAAA,MAAuCC,MAAvC,qBAAuCA,MAAvC;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,4BACE;AAAO,MAAA,OAAO,EAAEJ,KAAK,CAACK,KAAtB;AAAA,gBAA8BL,KAAK,CAACM;AAApC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,SAAS,EAAC,cAFZ;AAGE,MAAA,EAAE,EAAEN,KAAK,CAACK,KAHZ;AAIE,MAAA,IAAI,EAAEL,KAAK,CAACK,KAJd;AAKE,MAAA,YAAY,yBAAEJ,MAAM,CAACD,KAAK,CAACK,KAAP,CAAR,wDAAE,oBAAqBE,kBAArB,CAAwC,OAAxC,CALhB;AAME,MAAA,QAAQ,EAAE,kBAAAC,CAAC,EAAI;AACX,YAAMC,KAAK,GAAG,IAAIC,IAAJ,CAASF,CAAC,CAACG,aAAF,CAAgBC,KAAhB,GAAwB,WAAjC,CAAd,CADW,CAEX;;AACAX,QAAAA,MAAM,CAACD,KAAK,CAACK,KAAP,CAAN,GAAsBI,KAAtB;AACAP,QAAAA,YAAY;AACf;AAXH;AAAA;AAAA;AAAA;AAAA,YAFF,EAeGC,OAAO,CAACH,KAAK,CAACK,KAAP,CAAP,IAAwBD,MAAM,CAACJ,KAAK,CAACK,KAAP,CAA9B,gBACD,QAAC,iBAAD;AAAmB,MAAA,OAAO,yBAAED,MAAM,CAACJ,KAAK,CAACK,KAAP,CAAR,wDAAE,oBAAqBQ,QAArB;AAA5B;AAAA;AAAA;AAAA;AAAA,YADC,GACiE,IAhBpE;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD;;GA1BuBd,c;UAK4BF,gB;;;KAL5BE,c","sourcesContent":["import { useFormikContext } from \"formik\";\nimport MostrarErrorCampo from \"./MostrarErrorCampo\";\n\nexport default function FormGroupFecha(props: formGroupFechasProps) {\n  // Si queremos obtener por ejemplo la fecha de nacimiento del actor que estamos editando debemos usar un contexto que nos\n  // provee formik para extraer información. Con un contexto tenemos un proveedor que nos provee valores\n  // Desde cualquier componente interno de formik podemos acceder a los valores que nos da el contexto\n\n  const { values, validateForm, touched, errors } = useFormikContext<any>();\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={props.campo}>{props.label}</label>\n      <input\n        type=\"date\"\n        className=\"form-control\"\n        id={props.campo}\n        name={props.campo}\n        defaultValue={values[props.campo]?.toLocaleDateString('en-CA')}\n        onChange={e => {\n            const fecha = new Date(e.currentTarget.value + 'T00:00:00');\n            // con esto actualizamos el formulario\n            values[props.campo] = fecha;\n            validateForm();\n        }}\n      />\n      {touched[props.campo] && errors[props.campo] ?\n      <MostrarErrorCampo mensaje={errors[props.campo]?.toString()!} />: null}\n    </div>\n  );\n}\n\ninterface formGroupFechasProps {\n  campo: string;\n  label: string;\n}\n"]},"metadata":{},"sourceType":"module"}